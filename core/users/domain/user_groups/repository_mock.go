// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package user_groups is a generated GoMock package.
package user_groups

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hinha/coai/core/users/domain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddUserGroup mocks base method.
func (m *MockRepository) AddUserGroup(ctx context.Context, group *domain.UserGroup, fnInsert func(*domain.UserGroup) (*domain.UserGroup, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserGroup", ctx, group, fnInsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserGroup indicates an expected call of AddUserGroup.
func (mr *MockRepositoryMockRecorder) AddUserGroup(ctx, group, fnInsert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserGroup", reflect.TypeOf((*MockRepository)(nil).AddUserGroup), ctx, group, fnInsert)
}

// DeleteUserGroup mocks base method.
func (m *MockRepository) DeleteUserGroup(ctx context.Context, group *domain.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserGroup indicates an expected call of DeleteUserGroup.
func (mr *MockRepositoryMockRecorder) DeleteUserGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserGroup", reflect.TypeOf((*MockRepository)(nil).DeleteUserGroup), ctx, group)
}

// GetUserGroup mocks base method.
func (m *MockRepository) GetUserGroup(ctx context.Context, id int64, name string) (*domain.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroup", ctx, id, name)
	ret0, _ := ret[0].(*domain.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroup indicates an expected call of GetUserGroup.
func (mr *MockRepositoryMockRecorder) GetUserGroup(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroup", reflect.TypeOf((*MockRepository)(nil).GetUserGroup), ctx, id, name)
}

// IsActivateGroup mocks base method.
func (m *MockRepository) IsActivateGroup(ctx context.Context, name string) (*domain.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActivateGroup", ctx, name)
	ret0, _ := ret[0].(*domain.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActivateGroup indicates an expected call of IsActivateGroup.
func (mr *MockRepositoryMockRecorder) IsActivateGroup(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActivateGroup", reflect.TypeOf((*MockRepository)(nil).IsActivateGroup), ctx, name)
}

// UpdateGroupActive mocks base method.
func (m *MockRepository) UpdateGroupActive(ctx context.Context, id int64, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupActive", ctx, id, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupActive indicates an expected call of UpdateGroupActive.
func (mr *MockRepositoryMockRecorder) UpdateGroupActive(ctx, id, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupActive", reflect.TypeOf((*MockRepository)(nil).UpdateGroupActive), ctx, id, time)
}

// UpdateGroupInActive mocks base method.
func (m *MockRepository) UpdateGroupInActive(ctx context.Context, id int64, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupInActive", ctx, id, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupInActive indicates an expected call of UpdateGroupInActive.
func (mr *MockRepositoryMockRecorder) UpdateGroupInActive(ctx, id, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupInActive", reflect.TypeOf((*MockRepository)(nil).UpdateGroupInActive), ctx, id, time)
}

// UpdateUserGroup mocks base method.
func (m *MockRepository) UpdateUserGroup(ctx context.Context, group *domain.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserGroup indicates an expected call of UpdateUserGroup.
func (mr *MockRepositoryMockRecorder) UpdateUserGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroup", reflect.TypeOf((*MockRepository)(nil).UpdateUserGroup), ctx, group)
}
