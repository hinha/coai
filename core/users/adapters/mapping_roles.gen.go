// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package adapters

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hinha/coai/core/users/domain"
)

func newMappingRole(db *gorm.DB) mappingRole {
	_mappingRole := mappingRole{}

	_mappingRole.mappingRoleDo.UseDB(db)
	_mappingRole.mappingRoleDo.UseModel(&domain.MappingRole{})

	tableName := _mappingRole.mappingRoleDo.TableName()
	_mappingRole.ALL = field.NewAsterisk(tableName)
	_mappingRole.ID = field.NewInt64(tableName, "id")
	_mappingRole.RoleID = field.NewInt64(tableName, "role_id")
	_mappingRole.UserGroupsID = field.NewInt64(tableName, "user_groups_id")
	_mappingRole.CreatedAt = field.NewTime(tableName, "created_at")
	_mappingRole.UpdatedAt = field.NewTime(tableName, "updated_at")
	_mappingRole.DeletedAt = field.NewField(tableName, "deleted_at")

	_mappingRole.fillFieldMap()

	return _mappingRole
}

type mappingRole struct {
	mappingRoleDo mappingRoleDo

	ALL          field.Asterisk
	ID           field.Int64
	RoleID       field.Int64
	UserGroupsID field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (m mappingRole) Table(newTableName string) *mappingRole {
	m.mappingRoleDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mappingRole) As(alias string) *mappingRole {
	m.mappingRoleDo.DO = *(m.mappingRoleDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mappingRole) updateTableName(table string) *mappingRole {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.RoleID = field.NewInt64(table, "role_id")
	m.UserGroupsID = field.NewInt64(table, "user_groups_id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *mappingRole) WithContext(ctx context.Context) IMappingRoleDo {
	return m.mappingRoleDo.WithContext(ctx)
}

func (m mappingRole) TableName() string { return m.mappingRoleDo.TableName() }

func (m mappingRole) Alias() string { return m.mappingRoleDo.Alias() }

func (m *mappingRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mappingRole) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["role_id"] = m.RoleID
	m.fieldMap["user_groups_id"] = m.UserGroupsID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m mappingRole) clone(db *gorm.DB) mappingRole {
	m.mappingRoleDo.ReplaceDB(db)
	return m
}

type mappingRoleDo struct{ gen.DO }

type IMappingRoleDo interface {
	gen.SubQuery
	Debug() IMappingRoleDo
	WithContext(ctx context.Context) IMappingRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMappingRoleDo
	Not(conds ...gen.Condition) IMappingRoleDo
	Or(conds ...gen.Condition) IMappingRoleDo
	Select(conds ...field.Expr) IMappingRoleDo
	Where(conds ...gen.Condition) IMappingRoleDo
	Order(conds ...field.Expr) IMappingRoleDo
	Distinct(cols ...field.Expr) IMappingRoleDo
	Omit(cols ...field.Expr) IMappingRoleDo
	Join(table schema.Tabler, on ...field.Expr) IMappingRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMappingRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMappingRoleDo
	Group(cols ...field.Expr) IMappingRoleDo
	Having(conds ...gen.Condition) IMappingRoleDo
	Limit(limit int) IMappingRoleDo
	Offset(offset int) IMappingRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMappingRoleDo
	Unscoped() IMappingRoleDo
	Create(values ...*domain.MappingRole) error
	CreateInBatches(values []*domain.MappingRole, batchSize int) error
	Save(values ...*domain.MappingRole) error
	First() (*domain.MappingRole, error)
	Take() (*domain.MappingRole, error)
	Last() (*domain.MappingRole, error)
	Find() ([]*domain.MappingRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.MappingRole, err error)
	FindInBatches(result *[]*domain.MappingRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.MappingRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMappingRoleDo
	Assign(attrs ...field.AssignExpr) IMappingRoleDo
	Joins(fields ...field.RelationField) IMappingRoleDo
	Preload(fields ...field.RelationField) IMappingRoleDo
	FirstOrInit() (*domain.MappingRole, error)
	FirstOrCreate() (*domain.MappingRole, error)
	FindByPage(offset int, limit int) (result []*domain.MappingRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMappingRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mappingRoleDo) Debug() IMappingRoleDo {
	return m.withDO(m.DO.Debug())
}

func (m mappingRoleDo) WithContext(ctx context.Context) IMappingRoleDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mappingRoleDo) ReadDB() IMappingRoleDo {
	return m.Clauses(dbresolver.Read)
}

func (m mappingRoleDo) WriteDB() IMappingRoleDo {
	return m.Clauses(dbresolver.Write)
}

func (m mappingRoleDo) Clauses(conds ...clause.Expression) IMappingRoleDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mappingRoleDo) Returning(value interface{}, columns ...string) IMappingRoleDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mappingRoleDo) Not(conds ...gen.Condition) IMappingRoleDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mappingRoleDo) Or(conds ...gen.Condition) IMappingRoleDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mappingRoleDo) Select(conds ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mappingRoleDo) Where(conds ...gen.Condition) IMappingRoleDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mappingRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMappingRoleDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mappingRoleDo) Order(conds ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mappingRoleDo) Distinct(cols ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mappingRoleDo) Omit(cols ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mappingRoleDo) Join(table schema.Tabler, on ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mappingRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mappingRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mappingRoleDo) Group(cols ...field.Expr) IMappingRoleDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mappingRoleDo) Having(conds ...gen.Condition) IMappingRoleDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mappingRoleDo) Limit(limit int) IMappingRoleDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mappingRoleDo) Offset(offset int) IMappingRoleDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mappingRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMappingRoleDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mappingRoleDo) Unscoped() IMappingRoleDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mappingRoleDo) Create(values ...*domain.MappingRole) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mappingRoleDo) CreateInBatches(values []*domain.MappingRole, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mappingRoleDo) Save(values ...*domain.MappingRole) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mappingRoleDo) First() (*domain.MappingRole, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MappingRole), nil
	}
}

func (m mappingRoleDo) Take() (*domain.MappingRole, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MappingRole), nil
	}
}

func (m mappingRoleDo) Last() (*domain.MappingRole, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MappingRole), nil
	}
}

func (m mappingRoleDo) Find() ([]*domain.MappingRole, error) {
	result, err := m.DO.Find()
	return result.([]*domain.MappingRole), err
}

func (m mappingRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.MappingRole, err error) {
	buf := make([]*domain.MappingRole, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mappingRoleDo) FindInBatches(result *[]*domain.MappingRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mappingRoleDo) Attrs(attrs ...field.AssignExpr) IMappingRoleDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mappingRoleDo) Assign(attrs ...field.AssignExpr) IMappingRoleDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mappingRoleDo) Joins(fields ...field.RelationField) IMappingRoleDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mappingRoleDo) Preload(fields ...field.RelationField) IMappingRoleDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mappingRoleDo) FirstOrInit() (*domain.MappingRole, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MappingRole), nil
	}
}

func (m mappingRoleDo) FirstOrCreate() (*domain.MappingRole, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MappingRole), nil
	}
}

func (m mappingRoleDo) FindByPage(offset int, limit int) (result []*domain.MappingRole, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mappingRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mappingRoleDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mappingRoleDo) Delete(models ...*domain.MappingRole) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mappingRoleDo) withDO(do gen.Dao) *mappingRoleDo {
	m.DO = *do.(*gen.DO)
	return m
}
